buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url "http://maven.research.rackspacecloud.com/content/repositories/releases" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath "com.github.jacobono:gradle-jaxb-plugin:1.3.5"
        classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.0.2"

    }

}


configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'scala'
}

configurations.all {
    transitive = false
}

allprojects {
    apply plugin: 'idea'

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

subprojects {
    apply plugin: 'scala'
    group = 'org.openrepose.filters.impersonation'
    version = '3.0'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://maven.research.rackspacecloud.com/content/repositories/releases" }
        maven { url "http://repo.typesafe.com/typesafe/maven-releases" }
        maven { url "https://maven.research.rackspacecloud.com/content/groups/aggregate" }
    }

    dependencies {
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }

    task 'create-dirs' << {
        sourceSets.all { set ->
            set.allSource.srcDirs.each { it.mkdirs() }
        }
    }
}


/**
 * Because an Ear project is always the same, this is a function to clean up our build script
 * @param projectName The name of the ear project
 * @param deps a list of dependencies that will go in this ear
 * @return
 */
def filterBundleProject(String projectName, List<String> deps) {
    project(projectName) {
        apply plugin: 'ear'
        apply plugin: 'maven'
        apply plugin: 'maven-publish'
        apply plugin: 'maven-publish-auth'

        dependencies {
            deps.each { proj ->
                deploy project(proj)
                earlib project(proj).configurations.runtime
            }
        }

        publishing {
            publications {
                maven(MavenPublication) {
                    artifact ear
                }
            }
            repositories {
                maven {
                    name "releases.maven.research.rackspace.com"
                    url "http://maven.research.rackspacecloud.com/content/repositories/releases"
                }
            }
        }
    }

}

project(':impersonation-filter-tests'){
    apply plugin: 'groovy'
    apply plugin: 'org.unbroken-dome.test-sets'

    def spockVersion = "1.0-groovy-2.4"

    testSets {
        integrationTest
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test

    dependencies {
        integrationTestCompile 'org.openrepose:core-lib:7.1.5.1'
        integrationTestCompile 'org.apache.commons:commons-lang3:3.3.2'
        integrationTestCompile "org.codehaus.groovy:groovy:2.4.4"
        integrationTestCompile("junit:junit:4.12")
        integrationTestCompile("org.apache.httpcomponents:httpclient:4.5.1")
        integrationTestCompile("org.spockframework:spock-core:$spockVersion")
        integrationTestCompile("org.spockframework:spock-spring:$spockVersion")
        integrationTestCompile("org.springframework:spring-test:4.1.4.RELEASE")
        integrationTestCompile("org.apache.logging.log4j:log4j-core:2.3")
        integrationTestCompile("org.linkedin:org.linkedin.util-groovy:1.8.0")
        integrationTestCompile("org.rackspace:deproxy:0.21")
    }

    ext {
        reposeValveJar = 'valve.jar'
        filterEar = 'filter-bundle-*.ear'
        projectSetDir = "$projectDir/.."
        projectSupportDir = "$projectDir/../../repose-support"

        dependencyDir = "$projectDir/target/dependency"
        custombundleDir = "$projectDir/../custom-bundle/target"

        filterExtensionsEar = "extensions-filter-bundle-*.ear"
        impersonationBundleEar = "impersonation-bundle-*.ear"

        targetHostname = "localhost"

        reposeHome = "$buildDir/repose_home"
        reposeConfigDir = "$reposeHome/configs"
        reposeValveJarLocation = "$reposeHome/$reposeValveJar"
        reposeConfigTemplates = "$buildDir/configs"
        reposeVersion = "7.1.5.1"
    }

    //set up repose stuff
    task myCopy(type: Copy) {
        from('source')
        into('target')
        include('*.war')
    }


}

project(':impersonation-filter') {
    apply plugin: "com.github.jacobono.jaxb"
    apply plugin: 'jacoco'

    dependencies {
        compile "org.scala-lang:scala-library:2.10.4"
        compile 'org.openrepose:core-lib:7.1.5.1'
        testCompile 'org.apache.commons:commons-lang3:3.3.2'
        compile 'org.openrepose:utilities:7.1.5.1'
        compile 'org.openrepose:http-delegation:4.0.0'
        testCompile 'org.scalatest:scalatest_2.10:2.2.5'
        testCompile 'org.mockito:mockito-all:1.9.5'
        testCompile 'junit:junit:4.12'
        testCompile('com.mockrunner:mockrunner-servlet:1.0.0') {
            exclude group: 'xerces', module: 'xercesImpl'
            exclude group: 'commons-logging', module: 'commons-logging'
            exclude group: 'org.apache.tomcat', module: 'servlet-api'
        }

        compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
        provided 'javax:javaee-web-api:6.0'
        compile 'javax.servlet:javax.servlet-api:3.1.0'
        provided 'javax:javaee-api:6.0'
        jaxb 'com.sun.xml.bind:jaxb-xjc:2.1.8'
        jaxb "org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.6.5"
        jaxb "org.jvnet.jaxb2_commons:jaxb2-basics:0.6.4"
        jaxb "org.jvnet.jaxb2_commons:jaxb2-basics-annotate:0.6.4"
    }

    jaxb {
        xsdDir = "${project.name}/src/main/resources/META-INF/schema/config"
        xjc {
            taskClassname = "org.jvnet.jaxb2_commons.xjc.XJC2Task"
            generatePackage    = "org.openrepose.filters.config"
            args               = ["-Xinheritance", "-Xannotate"]
        }
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    check.dependsOn jacocoTestReport
}

filterBundleProject(':impersonation-filter-bundle-impersonation-filter-bundle', [':impersonation-filter'])
